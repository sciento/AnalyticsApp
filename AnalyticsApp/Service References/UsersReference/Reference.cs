//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnalyticsApp.UsersReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Users", Namespace="http://schemas.datacontract.org/2004/07/AnalyticsServer.Models")]
    [System.SerializableAttribute()]
    public partial class Users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string display_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid user_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string display_name {
            get {
                return this.display_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.display_nameField, value) != true)) {
                    this.display_nameField = value;
                    this.RaisePropertyChanged("display_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Guid user_id {
            get {
                return this.user_idField;
            }
            set {
                if ((this.user_idField.Equals(value) != true)) {
                    this.user_idField = value;
                    this.RaisePropertyChanged("user_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UsersReference.IUsersService")]
    public interface IUsersService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/Save", ReplyAction="http://tempuri.org/IUsersService/SaveResponse")]
        bool Save(AnalysticsLibrary.Users.Registration newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/Save", ReplyAction="http://tempuri.org/IUsersService/SaveResponse")]
        System.Threading.Tasks.Task<bool> SaveAsync(AnalysticsLibrary.Users.Registration newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/CheckUsername", ReplyAction="http://tempuri.org/IUsersService/CheckUsernameResponse")]
        bool CheckUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/CheckUsername", ReplyAction="http://tempuri.org/IUsersService/CheckUsernameResponse")]
        System.Threading.Tasks.Task<bool> CheckUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/CheckEmail", ReplyAction="http://tempuri.org/IUsersService/CheckEmailResponse")]
        bool CheckEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/CheckEmail", ReplyAction="http://tempuri.org/IUsersService/CheckEmailResponse")]
        System.Threading.Tasks.Task<bool> CheckEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/Get", ReplyAction="http://tempuri.org/IUsersService/GetResponse")]
        AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users> Get();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/Get", ReplyAction="http://tempuri.org/IUsersService/GetResponse")]
        System.Threading.Tasks.Task<AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users>> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/Remove", ReplyAction="http://tempuri.org/IUsersService/RemoveResponse")]
        AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users> Remove(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/Remove", ReplyAction="http://tempuri.org/IUsersService/RemoveResponse")]
        System.Threading.Tasks.Task<AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users>> RemoveAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/Update", ReplyAction="http://tempuri.org/IUsersService/UpdateResponse")]
        AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users> Update(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersService/Update", ReplyAction="http://tempuri.org/IUsersService/UpdateResponse")]
        System.Threading.Tasks.Task<AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users>> UpdateAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUsersServiceChannel : AnalyticsApp.UsersReference.IUsersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UsersServiceClient : System.ServiceModel.ClientBase<AnalyticsApp.UsersReference.IUsersService>, AnalyticsApp.UsersReference.IUsersService {
        
        public UsersServiceClient() {
        }
        
        public UsersServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UsersServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Save(AnalysticsLibrary.Users.Registration newUser) {
            return base.Channel.Save(newUser);
        }
        
        public System.Threading.Tasks.Task<bool> SaveAsync(AnalysticsLibrary.Users.Registration newUser) {
            return base.Channel.SaveAsync(newUser);
        }
        
        public bool CheckUsername(string username) {
            return base.Channel.CheckUsername(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUsernameAsync(string username) {
            return base.Channel.CheckUsernameAsync(username);
        }
        
        public bool CheckEmail(string email) {
            return base.Channel.CheckEmail(email);
        }
        
        public System.Threading.Tasks.Task<bool> CheckEmailAsync(string email) {
            return base.Channel.CheckEmailAsync(email);
        }
        
        public AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users> Get() {
            return base.Channel.Get();
        }
        
        public System.Threading.Tasks.Task<AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users>> GetAsync() {
            return base.Channel.GetAsync();
        }
        
        public AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users> Remove(string id) {
            return base.Channel.Remove(id);
        }
        
        public System.Threading.Tasks.Task<AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users>> RemoveAsync(string id) {
            return base.Channel.RemoveAsync(id);
        }
        
        public AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users> Update(string id) {
            return base.Channel.Update(id);
        }
        
        public System.Threading.Tasks.Task<AnalyticsLibrary.Models.Response<AnalyticsApp.UsersReference.Users>> UpdateAsync(string id) {
            return base.Channel.UpdateAsync(id);
        }
    }
}
